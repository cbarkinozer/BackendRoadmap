//Tutorial only Basics
++JavaScript:
The JavaScript syntax defines two types of values: Fixed values and Variable values
Fixed values are called Literals. Variable values are called Variables.

Comment: Code after double slashes // or between /* and */ is treated as a comment.

Variables:
JavaScript ES6(after 2015) allows the use of the "const" keyword to define a variable that cannot be reassigned.
The "let" keyword to define a variable with restricted scope.

All JavaScript variables must be identified with unique names called identifiers.
Names are case sensitive, reserved words cannot be used.
JavaScript identifies are case-sensitive.
Note: It's a good programming practice to declare all variables at the beginning of a script.

Constant Arrays:
const cars = ["Saab", "Volvo", "BMW"];// You can create a constant array
cars[0] = "Toyota";                   // You can change an element
cars.push("Audi");                    // You can add an element
cars = ["Toyota", "Volvo", "Audi"];   // ERROR


Equal Type:
===	equal value and equal type
!==     not equal value or not equal type
==      equal to
!=      not equal to

typeof	        Returns the type of a variable
instanceof	Returns true if an object is an instance of an object type

Operator Precedence:
,(comma)> yield(pause function)>Assignment operators> ?:(Condition)> Bitwise operations>!==>!=>===>==>instanceof(instance object)>in(property object)>greater and less operations> bitwise shifts>
arithmetic operations(+-*/)>exponention(**)>typeof(type)>!(logical not)>prefixes>postfixes>new>()function call>member[]>.(member)>()(expression group)

Null and Undefined: Are equal in value but different in type
"typeof" operator can return only string,number,boolean and "undefined".


Functions: !No need to indicate the return type 
function myFunction(p1, p2) {
  return p1 * p2;   // The function returns the product of p1 and p2
}

Objects:
var person = {
  firstName: "John",
  lastName : "Doe",
  id       : 5566,
  fullName : function() {
    return this.firstName + " " + this.lastName;
  }
};
person.fullName();
Avoid String, Number, and Boolean objects. They complicate your code and slow down execution speed.
var x = new String(); // Very bad approach

JavaScript Events:
HTML events are "things" that happen to HTML elements.
When JavaScript is used in HTML pages, JavaScript can "react" on these events.
It can be something the browser does, or something a user does.
Examples of HTML events:
An HTML web page has finished loading
An HTML input field was changed
An HTML button was clicked
Event handling attributes: <element event="some JavaScript"> or <element event='some JavaScript'>

In the following example, an onclick attribute (with code), is added to a <button> element:
<button onclick="document.getElementById('demo').innerHTML = Date()">The time is?</button>
This one is better: <button onclick="displayDate()">The time is?</button>

Common HTML Events:
onchange	An HTML element has been changed
onclick	The user clicks an HTML element
onmouseover	The user moves the mouse over an HTML element
onmouseout	The user moves the mouse away from an HTML element
onkeydown	The user pushes a keyboard key
onload	The browser has finished loading the page

What can JavaScript do?
Do something every time a page loads
Do something when the page is closed
Action that should be performed when a user clicks a button
Content that should be verified when a user inputs data
HTML event attributes can execute JavaScript code directly
HTML event attributes can call JavaScript functions
You can assign your own event handler functions to HTML elements
You can prevent events from being sent or being handled
And more ...

Strings:
var x = "John Doe";
For using quotes in the string:
\'	'	Single quote
\"	"	Double quote
\\	\	Backslash
Other escape sequences:
\b	Backspace
\f	Form Feed
\n	New Line
\r	Carriage Return
\t	Horizontal Tabulator
\v	Vertical Tabulator

! comparing different objects with === always fail because they are different objects

The "length" property returns the length of a string: var sln = txt.length;
The "indexOf()" method returns the index of (the position of) the first occurrence of a specified text in a string: var pos = str.indexOf("locate");
Both indexOf(), and lastIndexOf() return -1 if the text is not found
Both methods accept a second parameter as the starting position for the search: var pos = str.indexOf("locate", 15);
The lastIndexOf() methods searches backwards (from the end to the beginning):var pos = str.lastIndexOf("locate", 15);
The search() method searches a string for a specified value and returns the position of the match: var pos = str.search("locate");
The difference of "indexof()" and "search()" :
The search() method cannot take a second start position argument.
The indexOf() method cannot take powerful search values (regular expressions).
slice() extracts a part of a string and returns the extracted part in a new string:var res = str.slice(7, 13);
substring() is similar to slice() but cannot accept negative indexes:var res = str.substring(7, 13);
The replace() method replaces a specified value with another value in a string: var n = str.replace("Microsoft", "W3Schools");
A string is converted to upper case with toUpperCase(): var text2 = text1.toUpperCase();
A string is converted to lower case with toLowerCase(): var text2 = text1.toLowerCase();
concat() joins two or more strings: var text3 = text1.concat(" ", text2);
The trim() method removes whitespace from both sides of a string: alert(str.trim());
ECMAScript 2017 added two String methods: padStart and padEnd to support padding at the beginning and at the end of a string:
let str = "5"; str = str.padStart(4,0); // result is 0005
The charAt() method returns the character at a specified index (position) in a string: str.charAt(0); 
The charCodeAt() method returns the unicode of the character at a specified index in a string: str.charCodeAt(0);  

Numbers:
JavaScript has only one type of number. Numbers can be written with or without decimals.
JavaScript numbers are always stored as double precision floating point numbers.
var x = 3.14; or var y = 3; or var x = 123e5;  or var y = 123e-5;  
Integers (numbers without a period or exponent notation) are accurate up to 15 digits: var y = 9999999999999999;
The maximum number of decimals is 17, but floating point arithmetic is not always 100% accurate(because of rounding): var x = 0.2 + 0.1;
It helps to multiply and divide: var x = (0.2 * 10 + 0.1 * 10) / 10; 
JavaScript will try to convert strings to numbers in all numeric operations:var x = "100"; var y = "10"; var z = x / y;//z==10
NaN is a JavaScript reserved word indicating that a number is not a legal number.
You can use the global JavaScript function isNaN() to find out if a value is a number: isNaN(x);
NaN is a number: typeof NaN returns number:typeof NaN;// returns "number"
Infinity (or -Infinity) is the value JavaScript will return if you calculate a number outside the largest possible number.
Division by 0 (zero) also generates Infinity.
The toString() method returns a number as a string:x.toString(); 
toExponential() returns a string, with a number rounded and written using exponential notation:x.toExponential(2); 
toFixed() returns a string, with the number written with a specified number of decimals:x.toFixed(6); 
toPrecision() returns a string, with a number written with a specified length:x.toPrecision(2);
valueOf() returns a number as a number: x.valueOf();
Number() can also convert a date to a number.Returns the number of milliseconds since 1.1.1970.:Number(new Date("2017-09-30"));// returns 1506729600000
parseInt() parses a string and returns a whole number. Spaces are allowed. Only the first number is returned:parseInt("10.3 20 30");// returns 10
parseFloat() parses a string and returns a number:parseInt("10.3 20 30");// returns 10.3

Number Properties:
MAX_VALUE	        Returns the largest number possible in JavaScript
MIN_VALUE	        Returns the smallest number possible in JavaScript
POSITIVE_INFINITY	Represents infinity (returned on overflow)
NEGATIVE_INFINITY	Represents negative infinity (returned on overflow)
NaN	                Represents a "Not-a-Number" value
!Number Properties Cannot be Used on Variables:var y = x.MAX_VALUE;// y becomes undefined

Array:
Arrays are  a special kind of objects with numbered indexes.
Stores variables next to each other in memory and points the first memory address.
For simplicity, readability and execution speed do not use new Array().
Instead use this: var cars = ["Saab", "Volvo", "BMW"];
Access to a element in array: var name = cars[0];
Change: cars[0] = "Opel";
Access to full array: document.getElementById("demo").innerHTML = cars; 
!Adding elements with high indexes creates empty elements in array.

Array Methods:
toString() converts an array to a string of (comma separated) array values.
The join() method also joins all array elements into a string.
The pop() method removes the last element from an array.
The push() method adds a new element to an array (at the end).
The shift() method removes the first array element and "shifts" all other elements to a lower index(also shifted one is assignable):var x = fruits.shift();
The unshift() method adds a new element to an array (at the beginning), and "unshifts" older elements(returns the new array length).
Since JavaScript arrays are objects, elements can be deleted by using the JavaScript operator delete but leaves undefined holes in array.
!Use pop or shift instead of delete.
The splice(position,how many elements,elements) method can be used to add new items to an array: fruits.splice(2, 0, "Lemon", "Kiwi");
The concat() method creates a new array by merging (concatenating) existing arrays: var myChildren = myGirls.concat(myBoys); 
!The concat() method does not change the existing arrays. It always returns a new array.
The sort() method sorts an array alphabetically: fruits.sort();  
The reverse() method reverses the elements in an array: fruits.reverse(); 
!Fisher Yates method is used for random order sorting an array.
You can use Math.max.apply to find the highest number in an array.
The forEach(value,index,array) method calls a function (a callback function) once for each array element.
Array.map(value,index,array):
Creates new array by performing a function on each array element.
Does not execute the function for array elements without values.
!Does not change the original array
The filter(value,index,array) method creates a new array with array elements that passes a test.

Math Object:
Math.PI;// returns 3.141592653589793
Math.round(4.7);// returns 5
Math.pow(8, 2); // returns 64
Math.sqrt(64);// returns 8
Math.abs(-4.7);// returns 4.7
Math.ceil(4.4); // returns 5
Math.floor(4.7); // returns 4
Math.sin(90 * Math.PI / 180); // returns 1 (the sine of 90 degrees)
Math.min(0, 150, 30, 20, -8, -200); // returns -200
Math.random(); // returns a random number between zero and one

All object methods:
abs(x)	      		Returns the absolute value of x
acos(x)			Returns the arccosine of x, in radians
acosh(x)		Returns the hyperbolic arccosine of x
asin(x)			Returns the arcsine of x, in radians
asinh(x)		Returns the hyperbolic arcsine of x
atan(x)			Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians
atan2(y, x)		Returns the arctangent of the quotient of its arguments
atanh(x)		Returns the hyperbolic arctangent of x
cbrt(x)			Returns the cubic root of x
ceil(x)			Returns x, rounded upwards to the nearest integer
cos(x)			Returns the cosine of x (x is in radians)
cosh(x)			Returns the hyperbolic cosine of x
exp(x)			Returns the value of Ex
floor(x)		Returns x, rounded downwards to the nearest integer
log(x)			Returns the natural logarithm (base E) of x
max(x, y, z, ..., n)	Returns the number with the highest value
min(x, y, z, ..., n)	Returns the number with the lowest value
pow(x, y)		Returns the value of x to the power of y
random()		Returns a random number between 0 and 1
round(x)		Rounds x to the nearest integer
sin(x)			Returns the sine of x (x is in radians)
sinh(x)			Returns the hyperbolic sine of x
sqrt(x)			Returns the square root of x
tan(x)			Returns the tangent of an angle
tanh(x)			Returns the hyperbolic tangent of a number
trunc(x)		Returns the integer part of a number (x)

!Comparing different types always gives false: 2<"john" is false.
//I am skipping if else switch while do/while statements because they are exactly same with c language's.

Different kind of for loops:
for - 	   loops through a block of code a number of times
for/in -   loops through the properties of an object: for (x in person) {text += person[x];}
for/of -   loops through the values of an iterable object:for (variable of iterable) {}
It lets you loop over iterable data structures such as Arrays, Strings, Maps, NodeLists, and more
The JavaScript for/in statement can also loop over the properties of an Array: for (variable in array) {}
!Do not use for in over an Array if the index order is important.
The break statement "jumps out" of a loop.
The continue statement "jumps over" one iteration in the loop.

Labels:
To label JavaScript statements you precede the statements with a label name and a colon:
label:
statements
break labelname;
continue labelname;
The break statement, without a label reference, can only be used to jump out of a loop or a switch.
With a label reference, the break statement can be used to jump out of any code block:

Data types:
In JavaScript there are 5 different data types that can contain values:
string
number
boolean
object
function

There are 6 types of objects:
Object
Date
Array
String
Number
Boolean

And 2 data types that cannot contain values:
null
undefined

Regular Expressions:
A regular expression is a sequence of characters that forms a search pattern.
The search pattern can be used for text search and text replace operations.
Regular expressions can be used to perform all types of text search and text replace operations.
var patt = /w3schools/i;
/w3schools/i  is a regular expression.
w3schools  is a pattern (to be used in a search).
i  is a modifier (modifies the search to be case-insensitive).

Errors:
The try statement lets you test a block of code for errors.
The catch statement lets you handle the error.
The throw statement lets you create custom errors.
The finally statement lets you execute code, after try and catch, regardless of the result.

RangeError	A number "out of range" has occurred : number is out of range
ReferenceError	An illegal reference has occurred : A variable has not been declared
SyntaxError	A syntax error has occurred : syntax typo
TypeError	A type error has occurred :  outside the range of expected types
URIError	An error in encodeURI() has occurred : illegal characters in a URI function

!Newer versions of JavaScript do not throw EvalError. Use SyntaxError instead.

Scope:
In JavaScript there are two types of scope: Local scope and Global scope
JavaScript has function scope: Each function creates a new scope.
Scope determines the accessibility (visibility) of these variables.
Variables defined inside a function are not accessible (visible) from outside the function.
Variables declared within a JavaScript function, become LOCAL to the function.
Local variables have Function scope: They can only be accessed from within the function.
A variable declared outside a function, becomes GLOBAL.
A global variable has global scope: All scripts and functions on a web page can access it.
Note: In js objects and functions are also variables.
Scope determines the accessibility of variables, objects, and functions from different parts of the code.
Automatically Global: If you assign a value to a variable that has not been declared, it will automatically become a GLOBAL variable.
! In strict mode undeclared variables are not automatically global.
Strict mode makes it easier to write "secure" JavaScript.
Strict mode changes previously accepted "bad syntax" into real errors.
To declare strict mode: write "use strict"; at the beginning of the code.

In strict mode these are not allowed:
Using a variable or object, without declaring
Deleting a variable or object 
Deleting a function
Duplicating a parameter name
Octal numeric literalsOctal escape characters
Writing a read-only and get-only property
Deleting an undeletable property
Usig word eval and arguments as variable
with statement
eval() is not allowed to create variables in the scope
this keyword


Variables defined with let and const are hoisted to the top of the block, but not initialized.
Meaning: The block of code is aware of the variable, but it cannot be used until it has been declared.
!Using a let variable before it is declared will result in a ReferenceError.
carName = "Volvo";
let carName; //error
const carName; //error

!!Declare your variables at the top
Hoisting is (to many developers) an unknown or overlooked behavior of JavaScript.
If a developer doesn't understand hoisting, programs may contain bugs (errors).
To avoid bugs, always declare all variables at the beginning of every scope.
Since this is how JavaScript interprets the code, it is always a good rule.

"this" keyword:
Refers to the object it belongs to.

In a method, this refers to the owner object.
Alone, this refers to the global object.
In a function, this refers to the global object.
In a function, in strict mode, this is undefined.
In an event, this refers to the element that received the event.
Methods like call(), and apply() can refer this to any object.

Arrow Functions:
Arrow functions were introduced in ES6.
Arrow functions allow us to write shorter function syntax
Note: This works only if the function has only one statement.
Before:
hello = function() { return "Hello World!";}
After:
hello = () => { return "Hello World!";}

Class:
//most of things are same
A JavaScript class is not an object.
It is a template for JavaScript objects.

JSON:
JSON is a format for storing and transporting data.
JSON is often used when data is sent from a server to a web page.
JSON stands for JavaScript Object Notation
JSON is a lightweight data interchange format
JSON is language independent *
JSON is "self-describing" and easy to understand

3 employee records(objects) example:
{
"employees":[
  {"firstName":"John", "lastName":"Doe"},
  {"firstName":"Anna", "lastName":"Smith"},
  {"firstName":"Peter", "lastName":"Jones"}
]
}

JSON Syntax Rules:
Data is in name/value pairs
Data is separated by commas
Curly braces hold objects
Square brackets hold arrays


JS Conventions:
Spaces Around Operators
camelCase for identifier names (variables and functions).
note: js programmers prefer camelCase

JS Best Practices:
Avoid global variables, avoid new, avoid ==(use ===), avoid eval()
Avoid global variables
Declarations on top
Never use "new" for fundamental data types(number,string,boolean obj)

Use {} instead of new Object()
Use "" instead of new String()
Use 0 instead of new Number()
Use false instead of new Boolean()
Use [] instead of new Array()
Use /()/ instead of new RegExp()
Use function (){} instead of new Function()

Beware of automatic type conversions
End your switches with defaults
Never break a return statement
JSON does not allow trailing commas.
Undefined is Not Null
JavaScript objects, variables, properties, and methods can be undefined.
In addition, empty JavaScript objects can have the value null.
This can make it a little bit difficult to test if an object is empty.
You can test if an object exists by testing if the type is undefined.

Performance:
Access the length outside the for loop.
Reduce DOM Size
Avoid Unnecessary Variables
Delay JavaScript Loading
Avoid Using with


Reference:
w3school.com,javaScript
