//Tutorial only Basics
++JavaScript:
The JavaScript syntax defines two types of values: Fixed values and Variable values
Fixed values are called Literals. Variable values are called Variables.

Comment: Code after double slashes // or between /* and */ is treated as a comment.

Variables:
JavaScript ES6(after 2015) allows the use of the "const" keyword to define a variable that cannot be reassigned.
The "let" keyword to define a variable with restricted scope.

All JavaScript variables must be identified with unique names called identifiers.
Names are case sensitive, reserved words cannot be used.
JavaScript identifies are case-sensitive.
Note: It's a good programming practice to declare all variables at the beginning of a script.

Constant Arrays:
const cars = ["Saab", "Volvo", "BMW"];// You can create a constant array
cars[0] = "Toyota";                   // You can change an element
cars.push("Audi");                    // You can add an element
cars = ["Toyota", "Volvo", "Audi"];   // ERROR


Equal Type:
===	equal value and equal type
!==     not equal value or not equal type
==      equal to
!=      not equal to

typeof	        Returns the type of a variable
instanceof	Returns true if an object is an instance of an object type

Operator Precedence:
,(comma)> yield(pause function)>Assignment operators> ?:(Condition)> Bitwise operations>!==>!=>===>==>instanceof(instance object)>in(property object)>greater and less operations> bitwise shifts>
arithmetic operations(+-*/)>exponention(**)>typeof(type)>!(logical not)>prefixes>postfixes>new>()function call>member[]>.(member)>()(expression group)

Null and Undefined: Are equal in value but different in type
"typeof" operator can return only string,number,boolean and "undefined".


Functions: !No need to indicate the return type 
function myFunction(p1, p2) {
  return p1 * p2;   // The function returns the product of p1 and p2
}

Objects:
var person = {
  firstName: "John",
  lastName : "Doe",
  id       : 5566,
  fullName : function() {
    return this.firstName + " " + this.lastName;
  }
};
person.fullName();
Avoid String, Number, and Boolean objects. They complicate your code and slow down execution speed.
var x = new String(); // Very bad approach

JavaScript Events:
HTML events are "things" that happen to HTML elements.
When JavaScript is used in HTML pages, JavaScript can "react" on these events.
It can be something the browser does, or something a user does.
Examples of HTML events:
An HTML web page has finished loading
An HTML input field was changed
An HTML button was clicked
Event handling attributes: <element event="some JavaScript"> or <element event='some JavaScript'>

In the following example, an onclick attribute (with code), is added to a <button> element:
<button onclick="document.getElementById('demo').innerHTML = Date()">The time is?</button>
This one is better: <button onclick="displayDate()">The time is?</button>

Common HTML Events:
onchange	An HTML element has been changed
onclick	The user clicks an HTML element
onmouseover	The user moves the mouse over an HTML element
onmouseout	The user moves the mouse away from an HTML element
onkeydown	The user pushes a keyboard key
onload	The browser has finished loading the page

What can JavaScript do?
Do something every time a page loads
Do something when the page is closed
Action that should be performed when a user clicks a button
Content that should be verified when a user inputs data
HTML event attributes can execute JavaScript code directly
HTML event attributes can call JavaScript functions
You can assign your own event handler functions to HTML elements
You can prevent events from being sent or being handled
And more ...

Strings:
var x = "John Doe";
For using quotes in the string:
\'	'	Single quote
\"	"	Double quote
\\	\	Backslash
Other escape sequences:
\b	Backspace
\f	Form Feed
\n	New Line
\r	Carriage Return
\t	Horizontal Tabulator
\v	Vertical Tabulator









Reference:
w3school.com,javaScript
