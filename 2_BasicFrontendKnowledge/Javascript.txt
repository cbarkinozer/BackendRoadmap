//Tutorial only Basics
++JavaScript:
The JavaScript syntax defines two types of values: Fixed values and Variable values
Fixed values are called Literals. Variable values are called Variables.

Comment: Code after double slashes // or between /* and */ is treated as a comment.

Variables:
JavaScript ES6(after 2015) allows the use of the "const" keyword to define a variable that cannot be reassigned.
The "let" keyword to define a variable with restricted scope.

All JavaScript variables must be identified with unique names called identifiers.
Names are case sensitive, reserved words cannot be used.
JavaScript identifies are case-sensitive.
Note: It's a good programming practice to declare all variables at the beginning of a script.

Constant Arrays:
const cars = ["Saab", "Volvo", "BMW"];// You can create a constant array
cars[0] = "Toyota";                   // You can change an element
cars.push("Audi");                    // You can add an element
cars = ["Toyota", "Volvo", "Audi"];   // ERROR


Equal Type:
===	equal value and equal type
!==     not equal value or not equal type
==      equal to
!=      not equal to

typeof	        Returns the type of a variable
instanceof	Returns true if an object is an instance of an object type

Operator Precedence:
,(comma)> yield(pause function)>Assignment operators> ?:(Condition)> Bitwise operations>!==>!=>===>==>instanceof(instance object)>in(property object)>greater and less operations> bitwise shifts>
arithmetic operations(+-*/)>exponention(**)>typeof(type)>!(logical not)>prefixes>postfixes>new>()function call>member[]>.(member)>()(expression group)

Null and Undefined: Are equal in value but different in type
"typeof" operator can return only string,number,boolean and "undefined".


Functions: !No need to indicate the return type 
function myFunction(p1, p2) {
  return p1 * p2;   // The function returns the product of p1 and p2
}

Objects:
var person = {
  firstName: "John",
  lastName : "Doe",
  id       : 5566,
  fullName : function() {
    return this.firstName + " " + this.lastName;
  }
};
person.fullName();
Avoid String, Number, and Boolean objects. They complicate your code and slow down execution speed.
var x = new String(); // Very bad approach

JavaScript Events:
HTML events are "things" that happen to HTML elements.
When JavaScript is used in HTML pages, JavaScript can "react" on these events.
It can be something the browser does, or something a user does.
Examples of HTML events:
An HTML web page has finished loading
An HTML input field was changed
An HTML button was clicked
Event handling attributes: <element event="some JavaScript"> or <element event='some JavaScript'>

In the following example, an onclick attribute (with code), is added to a <button> element:
<button onclick="document.getElementById('demo').innerHTML = Date()">The time is?</button>
This one is better: <button onclick="displayDate()">The time is?</button>

Common HTML Events:
onchange	An HTML element has been changed
onclick	The user clicks an HTML element
onmouseover	The user moves the mouse over an HTML element
onmouseout	The user moves the mouse away from an HTML element
onkeydown	The user pushes a keyboard key
onload	The browser has finished loading the page

What can JavaScript do?
Do something every time a page loads
Do something when the page is closed
Action that should be performed when a user clicks a button
Content that should be verified when a user inputs data
HTML event attributes can execute JavaScript code directly
HTML event attributes can call JavaScript functions
You can assign your own event handler functions to HTML elements
You can prevent events from being sent or being handled
And more ...

Strings:
var x = "John Doe";
For using quotes in the string:
\'	'	Single quote
\"	"	Double quote
\\	\	Backslash
Other escape sequences:
\b	Backspace
\f	Form Feed
\n	New Line
\r	Carriage Return
\t	Horizontal Tabulator
\v	Vertical Tabulator

! comparing different objects with === always fail because they are different objects

The "length" property returns the length of a string: var sln = txt.length;
The "indexOf()" method returns the index of (the position of) the first occurrence of a specified text in a string: var pos = str.indexOf("locate");
Both indexOf(), and lastIndexOf() return -1 if the text is not found
Both methods accept a second parameter as the starting position for the search: var pos = str.indexOf("locate", 15);
The lastIndexOf() methods searches backwards (from the end to the beginning):var pos = str.lastIndexOf("locate", 15);
The search() method searches a string for a specified value and returns the position of the match: var pos = str.search("locate");
The difference of "indexof()" and "search()" :
The search() method cannot take a second start position argument.
The indexOf() method cannot take powerful search values (regular expressions).
slice() extracts a part of a string and returns the extracted part in a new string:var res = str.slice(7, 13);
substring() is similar to slice() but cannot accept negative indexes:var res = str.substring(7, 13);
The replace() method replaces a specified value with another value in a string: var n = str.replace("Microsoft", "W3Schools");
A string is converted to upper case with toUpperCase(): var text2 = text1.toUpperCase();
A string is converted to lower case with toLowerCase(): var text2 = text1.toLowerCase();
concat() joins two or more strings: var text3 = text1.concat(" ", text2);
The trim() method removes whitespace from both sides of a string: alert(str.trim());
ECMAScript 2017 added two String methods: padStart and padEnd to support padding at the beginning and at the end of a string:
let str = "5"; str = str.padStart(4,0); // result is 0005
The charAt() method returns the character at a specified index (position) in a string: str.charAt(0); 
The charCodeAt() method returns the unicode of the character at a specified index in a string: str.charCodeAt(0);  

Numbers:
JavaScript has only one type of number. Numbers can be written with or without decimals.
JavaScript numbers are always stored as double precision floating point numbers.
var x = 3.14; or var y = 3; or var x = 123e5;  or var y = 123e-5;  
Integers (numbers without a period or exponent notation) are accurate up to 15 digits: var y = 9999999999999999;
The maximum number of decimals is 17, but floating point arithmetic is not always 100% accurate(because of rounding): var x = 0.2 + 0.1;
It helps to multiply and divide: var x = (0.2 * 10 + 0.1 * 10) / 10; 
JavaScript will try to convert strings to numbers in all numeric operations:var x = "100"; var y = "10"; var z = x / y;//z==10
NaN is a JavaScript reserved word indicating that a number is not a legal number.
You can use the global JavaScript function isNaN() to find out if a value is a number: isNaN(x);
NaN is a number: typeof NaN returns number:typeof NaN;// returns "number"
Infinity (or -Infinity) is the value JavaScript will return if you calculate a number outside the largest possible number.
Division by 0 (zero) also generates Infinity.
The toString() method returns a number as a string:x.toString(); 
toExponential() returns a string, with a number rounded and written using exponential notation:x.toExponential(2); 
toFixed() returns a string, with the number written with a specified number of decimals:x.toFixed(6); 
toPrecision() returns a string, with a number written with a specified length:x.toPrecision(2);
valueOf() returns a number as a number: x.valueOf();
Number() can also convert a date to a number.Returns the number of milliseconds since 1.1.1970.:Number(new Date("2017-09-30"));// returns 1506729600000
parseInt() parses a string and returns a whole number. Spaces are allowed. Only the first number is returned:parseInt("10.3 20 30");// returns 10
parseFloat() parses a string and returns a number:parseInt("10.3 20 30");// returns 10.3

Number Properties:
MAX_VALUE	        Returns the largest number possible in JavaScript
MIN_VALUE	        Returns the smallest number possible in JavaScript
POSITIVE_INFINITY	Represents infinity (returned on overflow)
NEGATIVE_INFINITY	Represents negative infinity (returned on overflow)
NaN	                Represents a "Not-a-Number" value
!Number Properties Cannot be Used on Variables:var y = x.MAX_VALUE;// y becomes undefined

Array:
Arrays are  a special kind of objects with numbered indexes.
Stores variables next to each other in memory and points the first memory address.
For simplicity, readability and execution speed do not use new Array().
Instead use this: var cars = ["Saab", "Volvo", "BMW"];
Access to a element in array: var name = cars[0];
Change: cars[0] = "Opel";
Access to full array: document.getElementById("demo").innerHTML = cars; 
!Adding elements with high indexes creates empty elements in array.

Array Methods:
toString() converts an array to a string of (comma separated) array values.
The join() method also joins all array elements into a string.
The pop() method removes the last element from an array.
The push() method adds a new element to an array (at the end).
The shift() method removes the first array element and "shifts" all other elements to a lower index(also shifted one is assignable):var x = fruits.shift();
The unshift() method adds a new element to an array (at the beginning), and "unshifts" older elements(returns the new array length).


























Reference:
w3school.com,javaScript
