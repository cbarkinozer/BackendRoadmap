++PostgreSQL:
It is a powerful ope source object relational database system.
It has more than 15 years of active developement and a proven architecture that has earned it 
a strong reputation for reliability, data integrity and correctness.
PostgreSQL runs on all major operating systems.
It supports text,image,sound, video, programming interfaces for c,cpp,perl,ruby,tcl,odcb.

Why use PostgreSql?:
PostgreSQL is an Object Relational Database Management System (ORDBMS).
PostgreSQL support modern applications feature like JSON, XML etc. .
PostgreSQL performance well when executing complex queries.
PostgreSQL is complete ACID compliant.
PostgreSQL supports Materialized Views.
Offers useful features like Table partitioning, Point in Time Recovery, Transactional DDL, etc.
Ability to utilize 3rd party Key Stores in a full PKI infrastructure
Developers can modify open source code as it is licensed under BSD without the need to contribute back enhancements
Independent Software Vendors can redistribute it without the fear of being "infected" by an open source license
Users and Roles can be assigned Object level privileges
Supports AES, 3DES and other data encryption algorithms.

Disadvantages of PostgreSql:
The current external solutions require a high learning curve.
No upgrade facility for major releases.
The data need to be exported or replicated to the new version.
Double storage is needed during the upgrade process.
indexes cannot be used to directly return the results of a query.
Query execution plans are not cached.
Bulk loading operations may become CPU bound.
Sparse Independent Software Vendor support.


Shell Commands:
# help		Shows commands
psql --help 	General syntax help

\q   		Shows postgresql verion
\h   		Sql commands
\?   		psql commands
\g   		terminate with semicolon to execute query
\copyright  	distribution terms
\l		list databases
\c test 	connect to "test" database

CREATE DATABASE test; 	Creates database named test
DROP   DATABASE test;   Deletes database named test(Deletes everything, avoid using without backup)

Connection options:
-h, --h=HOSTNAME	database server host or socket directory(default: "local socket")
-p, --port=PORT		database server port
-U, --username		database user name
-w, --no-password	never prompt for password
-W, --password		force password prompt(should happen automatically)

Querry Buffer:
\e [FILE][LINE] 	edit the query buffer(or file) with external editor
\ef [FUNCNAME [LINE]]	edit function definition with external editor
\ev [VIEWNAME [LINE]]	edit view definition with external editor
\p			show the contents of the query buffer
\r			reset(clear) the query buffer
\s [FILE]		display history or save it to file
\w FILE			write query buffer to file

Input/Output:
\copy ...		perform SQL COPY with data stream to the client host
\echo[STRING]		write string to standard output
\i FILE			execute commands from file
\ir FILE		as \i, but relative to location of current script
\o [FILE]		send all query results to file or |pipe
\qecho [STRING]		write string to query output stream(see \o)



Creating a table:
CREATE TABLE table_name{
Column name+ data type + constraints if any
}

How to crate table with Postgres:
CREATE TABLE person{
id BIGSERIAL NOT NULL PRIMARY KEY,
first_name VARCHAR(50) NOT NULL,
last_name VARCHAR(50) NOT NULL,
gender VARCHAR(6) NOT NULL,
date_of_birth DATE NOT NULL,
}

Shell command for creating table:
CREATE TABLE person(
id BIGSERIAL NOT NULL PRIMARY KEY,
first_name VARCHAR(50) NOT NULL,
last_name VARCHAR(50) NOT NULL,
gender VARCHAR(7) NOT NULL,
date_of_birth DATE);
CREATE TABLE

\d   		List of relations
\d person  	Table "public.person"
\dt             List of relations(just tables)

How to insert records into tables:
INSERT INTO person(
first_name,
last_name,
gender,
date_of_birth)
VALUES('Jake','Jones','MALE',DATE'1990-01-10','jake@gmail.com');

Note: If the response to the insertion is "0 1" it means insertion worked.
Note: Mockaroo API creates test data for you.

Showing values:
SELECT first_name FROM person;

Sorting data:
SELECT * FROM person ORDER BY country_of_birth;

Comparison Operators:
=  Equal
<= Lesser and equal
>= Greater and equal
<> Not Equal
The response will be t for True, f for False

Limit offset and fetch:
SELECT * FROM person LIMIT 5;				First 5 row
SELECT * FROM person OFFSET 5 LIMIT 5;  		First 5 row from 5. row
SELECT * FROM person OFFSET 5 FETCH FIRST 5 ROW ONLY;	First 5 row from 5. row
WHERE:
SELECT * FROM person WHERE country_of_birth ='China';
OR country_of_birth = 'France' OR country_of_birth = 'Brazil';
This query is same as bottom query.
IN:
SELECT * FROM person WHERE country_of_birth IN ('China','Brazil','France');
LIKE:
SELECT * FROM person WHERE email LIKE '__h@%'
SELECT * FROM person WHERE date_of_birth BETWEEN '2000-01-01' AND '2015-01-01'
GROUPBY:
SELECT * country_of_birth, COUNT(*) FROM person GROUP BY country_of_birth ORDER BY country_of_birth;
COUNT(*) is an aggregation function and means "number of input rows".
Min max avarage:
SELECT MAX(price) FROM car;
SELECT make,model, MIN(price) FROM car GROUP BY make,model;
Sum:
SELECT SUM(price) FROM car;
Arithmetic Operators:
SELECT id,make,model, price, ROUND(price * .10,2) ROUND - (price*.10),2) FROM car;
Alias:
SELECT id,make,model,price AS original_price, ROUND(price * .10,2) AS ten_percent, ROUND(price * .10),2) AS discount_after_10_percent FROM car;
Coalesce:
SELECT COALESCE(email,'Email not provided') FROM person;
NULLIF:
SELECT NULLIF(10,10);
This is how you handle dividing by zero
COALESCE(10/NULLIF(0,0),0);
Timestamps and Dates:
SELECT NOW()::TIME;
Adding and substracting with dates:
SELECT NOW() - INTERVAL '10 MONTHS';
Extracting Fields from Timestamp:
SELECT EXTRACT(MONTH FROM NOW());
Age Function:
SELECT first_name,last_name,gender,country_of_birth_date_of_birth,AGE(NOW(),date_of_birth) AS age FROM person;
Primary Keys:
SELECT * FROM person WHERE id=1;
Unique Constrains:
ALTER TABLE person ADD PRIMARY KEY(id);
Check Contrains:
ALTER TABLE person ADD CONSTRAINT unique-email_address UNIQUE(email);
How to delete records:
DELETE FROM person WHERE id= 1011;
DELETE FROM person WHERE gender ='Female' AND country_of_birth = 'England';
How to update records:
UPDATE person SET first_name ='Omar', last_name = 'Montana' WHERE id = 2011;
On conflict do nothing:
INSERT INTO person(id,first_name,last_name,gender,country_of_birth) VALUES(2017,'Russ','Ruddoch','Male','Norway') ON CONFLICT(id) DO NOTHING;
Upsert:
INSERT INTO person(id,first_name,last_name,gender,country_of_birth) VALUES(2017,'Russ','Ruddoch','Male','Norway') ON CONFLICT(id) DO UPDATE
 SET gender='Female',first_name=EXCLUDED.first_name,last_name=EXCLUDED.last_name;
Relationship and foreign keys:
Tables have relationship with each other. Main table has Primary key, other table has foreign key works as that tables PK.
Adding relationship between tables:
In coding file person-car.sql, add to the create table query command this:
UNIQUE(car_id)
Ineer Joins:
JOIN car ON person.car_id = car.id;
Left joins:
LEFT JOIN car ON person.car_id = car.id;
Serial and sequences:
ALTER SEQUENCE person_id?seq RESTART WITH 10;


References:
freecodecamp,youtube,Learn PostgreSQL Full course for beginners
