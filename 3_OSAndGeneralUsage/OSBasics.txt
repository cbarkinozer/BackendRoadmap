++Terminal Usage:
Using a terminal allows us to send simple text commands to our computer to do things like navigate through a directory or copy a file,
and form the basis for many more complex automations and programming skills.
Windows: Although windows comes with ‘cmd’ you will need to download the tool ‘PowerShell’ in order to run any of the commands in this tutorial.
Linux: Most Linux distributions supply several, such as: gnome-terminal, konsole, xterm, rxvt, kvt, nxterm, and eterm.
No need to download anything, just read the help documentation for your distribution to see which one is included.

1_Change Directory
Command: cd
Changes the directory of the command line path
Example: cd "path/to/directory/"

2_Listing Directory
Command: ls
Lists the contents of a directory
ls "path/to/directory/"

3_Open Files:
Command: open
Opens a file
open "filename"

4_Copy a file to another directory
Command: cp
cp "filename" "newfilename"


5_Move a file
Command: mv
mv "filename" "path/to/new/file/location"

6_Renaming a file
Command: mv
mv "path/to/filename" "path/to/newfilename"

7_Create a directory
Command:mkdir
mkdir "path/to/new/directory"

8_Remove an empty directory
Command: rmdir
rmdir "path/to/directory"

9_Remove nested directories
Command: rm -R
rm -R "/path/to/root/directory"


10_Execute commands with superuser privileges
Command: sudo
sudo "command"

11_List actively running computer processes
Command:top
top

12_Quit sub-screen and return to Terminal
Command: q
After executing a command, such as "top" to view active processes, press "q" to exit

13_Clear the terminal screen of all previous commands
Command: clear
clear

14_Get help for a command
Command:help
help "command"

15_Get one-line description for a command
Command:whatis
whatis "command"


16_Show manual page for a command
Command:man
man "command"



++How OSs work in general?:

There are three key elements of an operating system, which are:
(1) Abstractions (process, thread, file, socket, memory),
(2) Mechanisms (create, schedule, open, write, allocate), and
(3) Policies (LRU, EDF)

There are two operating system design principles, which are:
(1) Separation of mechanism and policy by implementing flexible mechanisms to support policies, and 
(2) Optimization for common case: Where will the OS be used? What will the user want to execute on that machine? What are the workload requirements?

There are three types of Operating Systems commonly used nowadays.
The first is Monolithic OS, where the entire OS is working in kernel space and is alone in supervisor mode.
The second is Modular OS, in which some part of the system core will be located in independent files called modules that can be added to the system at run time.
And the third is Micro OS, where the kernel is broken down into separate processes, known as servers. Some of the servers run in kernel space and some run in user-space.



++Porcess Management:
A program is basically a program in execution. The execution of a process must progress in a sequential fashion.
To put it in simple terms, we write our computer programs in a text file, and when we execute this program,
it becomes a process which performs all the task in the program.
When a program is loaded into the memory and it becomes a process, it can be divided into four sections: stack,heap,text,data.
Stack: The process Stack contains the temporary data, such as method parameters, return adress and local variables.
Heap: This is dynamically allocated memory to a process during its run time.
Text: This includes the current activity represented by the value of Program Counter and the contents of the processor's registers.
Data: This section contains the global and static variables.
When a process executes, it passes through different states. These stages may differ in different operating systems,
and the names of these states are also not standardized.
In general a process can have one of the following five states at a time:

Start->	Ready-><-Running->Terminated
             /\  |
             |   \/ 
            W a i t
Start:
The initial state whe a process is first started/created.
Ready:
The process is waiting to be assigned to a processor.
Ready processes are waiting to have the processor allocated to them by the operating system so that they can run.
A process may come into this state after the Start state, or while running it by but getting interrupted by the scheduler to assign CPU to some other process.
Running:
Once the process has been assigned to a processor by the OS scheduler, the process state is set to running and the processor executes its instructions.
Waiting:
The process moves into the waiting state if it needs to wait for a resource, such as waiting for user input, or waiting for a file to become available.
Terminated or Exit:
Once the process finishes its execution, or it is terminated by the operating system, it is moved to the terminated state where it waits to be removed from main memory.

Process Control Block(PCB): A data structure maintained by the operating system for every process.
The PCB is identified by an integer process ID(PID).
A PCB keeps all the information needed to keep track of a process as listed below:
PID,State,Pointer,Priority,Program counter,CPU registers, I/O information, Accounting information etc...
PID: Unique identification for each of the processes in the operating system.
State: The current state of the process(ready,running,waiting or else)
Pointer: A pointer to the parent process
Priority: This is required to allow/disallow access to system resources.
Program counter: A pointer to address of the instruction to be executed for this process.
CPU Registers: Various CPU registers where processes need to be stored for execution for running state.
I/O information: This includes a list of I/O devices allocated to the process.
Cpu scheduling information: Process priority and other scheduling information which is required to schedule the process.
Memory management information: This includes the information of page table, memory limit, and segment table depending on the memory used by the OS.
Account information: This includes the amount of CPU used for process execution, time limits, execution ID and so on.
IO status information: This includes a list of I/O devices allocated to the process.


++Threads and Concurrency:
A thread is a flow of exeution through the process code.
It has its own program counter that keeps track of which instruction to execute next.
It also has system registers which hold its current working variables, and a stack which contains the execution history.
A thread shares with its peer threads various information like code segment,data segment and open files.
When one thread alters a code segment memory item all other threads see that.

A thread is also called a lightweight process.
Threads provide a way to improve applicaton performance through parallelism.
Threads represent a software approach to improving the performance of OS by reducing the overhead.
A thread is equivalent to a classical process.

Each thread belongs to exaclty one process, and no thread can exist outside a process each thread represents a seperate flow control.
Threads hav been successfully used in implementing network serves and web servers.
They also provide a suitable foundation for parallel execution of applications on shared memory multiprocessors.

Advantages:
Minimize the context switching time
Using them provides concurrency within a process
They provide efficient communication
It is more economical to create and context switch threads
Threads allow utilization of multiprocessor architectures to a greater scale and efficiency

Implemented in two ways:
User level threads: User-managed threads
Kernel level threas:Operating system managed threads acting on a kernal an operating system core

User level threads:
In this case the thread management kernel is not aware of existence of threads. The thread library contains code for creating and destroying threads.
The thread library contains code for creating and destroying threads , for passing messages and data between threads for scheduling thread  execution,
and for saving and restoring thread contexts.
The application starts with a single thread.

Advantages:
Thread switching does not require Kernel mode privileges.
Can run on any OS.
Scheduling can be application specific in the user level thread.
Fast to create and manage

Disadv:
In typical os most system calls are blocking
Multithreading application cannot take advantage of multiprocessing

Kernel level threads:
In this case thread managment is done by the Kernel.
There is no thread management code in the application area.
Kernel threads are supported direclty by the OS.
Any application can be programmed to be multithreaded.
All of the threads within an application are supported within a single process.
The kernel maintains conext info for the process as a whole and for individuals threads within the process.
Scheduling by the Kernel is done on a thread basis. The kernel performs thread creation,
scheduling and management in kernel space. Kernel threads are generally slower to create and manage than user threads.

Adv:
The kernel can simultaneously schedule multi threads from the same process on multiple processes
If one thread in a process is blocked the kernel can schedule another thread of the same process
Kernel routines themselves can be multithreaded

Disadv:
Kernel threads are generally slower to create and manage than the user threads
Transfer of control from one thread to another within the same process requires a mode switch to the kernel


Scheduling:
 The process of scheduling is the responsibility of the process manager that handles the removal of the running process from the CPU an
the selection of another process on the basis of a particular strategy.

Process scheduling is an essential part of a multiprogramming operating system.
These operating systems allow more than one process to be loaded into the executable memory at a time and the loaded process shares the
Cpu using time multiplexing.

The OS maintains all process control blocks(PCBs) in process scheduling queues. The OS maintains a seperate queue for each of the process states,
and PCBs of all processes in the same execution state areplaced in the same queue. When the state of a process is changed,
its PCB is unlinked from its current queue and moved to its new state queue.

The OS maintains the following important process scheduling queues:
Job queue: This queue keeps all the processes in the system
Ready queue: Keeps a set of all processes residing in the main memory ready and waiting to execute.
A new process is always put in the queue.
Device queues: The processes which are blocked due to unavailability of an I/O device constitute this queue.

The OS can use diferent policies to manage each queue(FIFO). The OS scheduler determines how to move processes
between the ready and run queues which can only have one entry per processor core on the system.
Two-state process models refer to running and non-running states:
Running: When a new process is created it enters into the system in the running state.
Not running: Processes that are not running are kept in queue, waiting for their turn to execute.
Each entry in the queue is a pointer to a particular process.
Queue is implemented by using a linked list.
The use of dispatcher is as follows: When a process is interrupted, that process is transferred in the waiting queue.
If the process has completed or aborted, the process is discarded. Either case the dispacther then selects a process from the queue
to execute.

++Memory Managment:
The functionality of an operating system which handles or manages primary memory.
It moves processes back and forth between main memory and the disk during execution.

Memory management keeps track of each and every memory location, regardless of whether it is allocated to some process or free.
It checks how much memory is to be allocated to processes.
It decides which process will get memory at what time.
It tracks whenever memory gets freed up or unallocated and correspondingly updates the status.

The operating system takes care of mapping the logical addresses to physical addresses at the time of memory allocation to the program.
There are three types of addresses used in a program before and after memory is allocated:
Symbolic addresses: The addresses used in a source code.
The variable names,constants,instruction labels are the basic elements of the symbolic address space.
Relative addresses: At the time of compilation a compiler converts symbolic addresses into relative addresses.
Physical addresses: The loader generates these addresses at the time when a program is loaded into amin memory.


Virtual and physcial addresses are the same in compile time and load time address binding schemes. 
Virtual and physical addresses differ in execution time address binding schemes.

The set of all logical addresses generated by a program is reffered to as a logical adress space.
The set of all physical addresses correspoding to these logical addresses is referred to as a physical address spacd.

++Interprocess Communication

There are two types of processes: Independent and cooperating.
An independent process is not affected by the execution of other processes while a cooperating process can be affected by other executing processes.
You might think thos e processes whihc are running independently would execute very efficiently but in realty there are many
situations when a process cooperative nature can be utilized for increasing computational speed conveince and modularity.
Interprcoess communication(IPC) is a mechanism whşch allows process to communicate with each other and synchronize their actions.
The acoomunication between these processes can be seen as a method of cooperaiton between them.

Processes can communicate with each other in two ways: Share memory and message parsing

Shared memory:
Let's say there are wto processes: the producer and the consumer.
The procuder produces some item and consumer consumes that item.
The two processes shares the item produced by the producer is stored and from where the consumer consumes the item if needed.

There are two versions of this problem:
First one is knows as the unbounded buffer problem in which the producer can keep on producing items and
there is no limit on the size of the buffet.
The secon one is known as the bounded buffer problem in which the producer can produce up to a certain number of items and after
that it starts waiting for the consumer to consume them.

In the bounded buffer problem the producer and the consumer will share some common memory.
Then the producer will start produicng items.
If the toatl number of produced items is equal to the size of buffer the producer will wait until they are consumed by the consumer.

Similarly the consumer first checks for the availability of the item and if no item is available the consumer will wait for theproducer to produce it.
If there are items available the consumer will consume them.

Message parsing method:
Processes communicate with each other without using any kind of shared memory. If two processes p1 and p2 want to communicate with each other
they proceed as follows:
Establish a communication link if a link exists no need to establish again
Start exhanging messages using basic primitives. We need at least two primitives: save(message,dest) or send(message)
and reveive(message,host) or receive(message)
The message size can be fixed or variable. If it is a fixed size it is easy for the OS designer but complicated for programmer.
If it is a variable size then it is easy for programmer but complicated for OS designer.
A standard message has two parts: a header and a body.

The header is used for storing the message type destination id,source id,message length and control information.
The control information contains information like what to do if it runs out of buffer space the sequence number and its priority.
Generally the message is sent using FIFO style.

++I/O Management
One of the important jobs of an OS is to manage various IO devices.
An IO system is require to take an application IO request and sen it to the physical device then take whatever response comes back
from the device and send it back to application.
IO devices can be divided into two categories:
Bloc devices: Ablock device is one with which the driver communicates by sending entire blocks of data.
For example hard disks USB cameras disk on keys so on.
Character Devices: 
A character device is one with which the driver communicates by sending an dreceiving single characters(bytes and octets).
For example serial ports, parallel ports, sound cards and so on.
The CPU must have a way to pass info to and from an IO device.
There are three approaches available to communicate with the CPU and Device.
1_ Special Instruction I/O
This uses CPU instructions that are specifically made for controlling IO devices.
These instructions typically allow data to be sent to an IO device or be read from an IO device.
2_Memory- mapped I/O
When using memory-mapped IO the same adress space is shared by memory and IO devices.
The device is connected direclty to certain main memory locations sos that the IO device can
transfer a block of data to or from the memory without going through the CPU.
While ysing memory mapped IO the OS allocates buffer in the memory and informs the IO device to
use that buffer to send data to the CPU. The IO device operates asynchronoulsy with the CPU and interrupts
the CPU when finished.
The advantage to this method is that every instruction which can access memory can be used to manipulate an IO device.
Memory mapped IO is used for most high speed IO devices like disks and communication interfaces.
3_ Direct memory access:
Slow devices like keyboards will generate an interruption to the main CPU after each byte is transferred.
If a fast device, such as a disk, generated an interruption for each byte, the operating system would spend most of its time handling these interruptions.
So a typical computer uses direct memory access (DMA) hardware to reduce this overhead.
Direct Memory Access (DMA) means the CPU grants the I/O module authority to read from or write to memory without involvement.
The DMA module itself controls the exchange of data between the main memory and the I/O device.
The CPU is only involved at the beginning and end of the transfer and interrupted only after the entire block has been transferred.
Direct Memory Access needs special hardware called a DMA controller (DMAC) that manages the data transfers and arbitrates access to the system bus.
The controllers are programmed with source and destination pointers (where to read/write the data), counters to track the number of transferred bytes,
and various settings.
These include the I/O and memory types and the interruptions and states for the CPU cycles.

++Basic Terminal Commands(grep,awk,sed,lsof,curl,wget,tail,head,less,find,ssh,kill)

grep:
lets you search through all the text in a given file.
Ex: grep blue notepad.txt

awk:
Enables programmer to write tiny programs.
Searches one or more files to see if they contain lines that matches with the specified patterns
than performs the associated actions.
Ex:
awk option 'selection_criteria{acion }' input-file > output-file

sed:
Stream editor, can perform lots of functions on file like searching,find and replace
insertion or deletion. You can manipulate files without opening.
Ex:
sed OPTIONS...[SCRIPT][INPUTFILE...]

lsof:
Stands for List of open file.
Provides a list of files that are opened.
It gives info to find out the files which are opened by which process.
It lists out all open files in output console.
lsof [option][user name]

curl:
Transfer data to or from a server, using any of the supported protocols(HTTP,FTP,IMAP,POP3,SCP,SFTP,SMTP,TFTP,TELNET,LDAP,FILE).
Prefered for automation since it is designed to work without user interaction.
Can transfer multiple files at once.
Ex:
curl[options][URL...]

wget:
You can download files from the internet.
Ex:
wget www.google.com

tail:
Display the last ten lines of a text file.
Ex:
tail -n filename.txt

head:
View the first lines of any text file.
By default it will show the first ten lines but you can change this number.
Ex: 
To show first five lines
head -n 5 filename.ext

less:
Displays the contents of a file or command output one page at a time.
Does not read entire file which results much faster load times.
Used for opening large files.
Ex:
less[OPTIONS] filename 

find: 
Similar to the locate command using find also searches for files and directories.
The differerence is you use the find command to locate files within a given directory.
Ex:
find/home/-name notes.txt command will search for a file called notes.txt within the home directory and its subdirectories.
Other variations:
To find files in the current dirctory use, find.-namenotes.txt
To look for directories use,/ -type d-name notes.txt

ssh:
Secure encrypted connection between two hosts over an insecure network.
Used for terminal access,file transfer and for tunneling other applications.
ssh sample.ssh.com

kill:
If you have an unresponsive program you can terminate it manually by kill command.
It will send a certain signal to the misbehaving app and instructs the app to terminate itself.
There are 64 signals but people usally use 2 signals:
SIGTERM(15):
Request a program to stop running and gives it some time to save all of its progres.
If you don't specify the signal when entering the kill command this signal will be used.
SIGKILL(9):
Forces programs to stop immediately.
Unsaved progress will eb lost.
Besides signals you also need to know the process identification number(PID) of the program
you want to kill.
If you don't know the PID simply run the command ps ux.
Ex:
kill[signal option] PID


++POSIX Basics(stdin,stdout,stderr,pipes)
POSIX stands for "Portable Operating System Interface" and defines a set of standards to provide compatibility between different computing platforms.
POSIX defines various tools interfaces, commands and APIs for UNIX-like operating systems and others.
Stdin:
stdin is the standard input stream. This accepts text as its input.
Stdout:
stdout is the standard output stream to write the output data.
Stderr:
stderr is the standard output stream to show error messages.
Pipes:
Pipes are mechanisms for unidirectional interprocess or interthread communication within the scope of a single machine.
Logically a pipe consists of two connected termini, one to which data can be written and another from
which that data can subsequently be read with a data buffer between such that writes and reads are not required to be
synchronous.
Pipes should be distinguished from shell pipelines which are an application of pipes.
Consider this command: ls|cat
the ls output(stdout) is piped into another command(cat)
Redirect:
The > redirection symbol works with stdout by default.
1>to stdout redirect.> is shortand for 1>
2>to stderr redirect
Ex:
Command1> capture.txt
Above command will save the stdout into the caputre.txt file.
Command2>capture.txt
The above command will save the stderr into the capture.txt file.
Command1> capture.txt2>error.txt
The above command will save the stdout in the capture.txt and stderr in error.xt file
Command1>capture.txt2>&1
The above command will save the stdout and stderr into capture.txt file

++Basic Networking Concepts
Networks are made up of various devices such as computer, switches,routers connected togeter by
caples or wireless signals.
Clients and Servers:
Server is a computer thtat holds content and services such as website a media file or chat app.
A client is a different computer generally user.
The client can connect over a netwrok  to exchange info.

Ip addresses:
In order to send and direct data across network computer need to be able to identify destinations and origins.
This identifiaction is IP address.
It is set of numbers seperated by dots like 173.194.43.7.
It is similar to street adresses.
There are different classifications or types of IP addresses. A network can be public, private.
Public Ip addresses are accesible anywhere on the internet.
Private IP addresses are not and most are typşcally hidden behind a device with public IP address.

Network Hubs and Switches:
Traditionally computers are connected via cables.
The cable used most often is Ethernet which consist of four pairs of wires.
"Hub" is a device, all computers are connected to this device.
Hub controls the communication because we cant connect every pc with other pcs one by one.
A network with hub may slow down if many computers are sending messages at the same time.
For this problem there is "switch". Instead of repeating all messages that come in,
a switch only sends the message to the intended destination. This eliminates unnecessary repetation.
Also switches remember the destination so they do not try every optional connection way.

Routers and Firewalls:
Routers do the majority of the hard work on a network. They make the decision about all the messages that travel
on the network and whether to pass messages to and from outside networks. There are three functions:
Seperate and Bridge:
Routers seperate networks into sections, or bridge different networks together, as we see in the example above
the private network of 192.168.1 street is bridged to the internet with a public ip address.

Assign IPs:
They can assign IP addresses In the example of 192.168.1 street if a new house is bult on the street
it would get whatever the next highest house number available.
In the case of routers they assign IP addresses using DHCP Dynamic host configuration protocol.

Firewall and protect:
They can filter messages or keep users out of private networks. Most routers have a Firewall built in.
This is a software function that keeps unwanted messages from raching the computters on the inside or private part 
of the network.


References:
University of Washington, What is Terminal
Tech Republic,16 Terminal commands every user should know
James Le,medium,How os work 10 concepts you should know as a developer
udhayaas97,medium,posix basics
commotionwireless,learn networking basics
